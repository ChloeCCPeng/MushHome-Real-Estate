{"ast":null,"code":"import * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from './helpers';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor,\n    activeUnderlineColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    ...rest\n  } = _ref;\n  const isAndroid = Platform.OS === 'android';\n  const {\n    colors,\n    fonts\n  } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  let {\n    paddingLeft,\n    paddingRight\n  } = calculateFlatInputHorizontalPadding({\n    adornmentConfig\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat\n  });\n  let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingFlat = adjustPaddingFlat({ ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: leftLayout.height\n  }) : null;\n  const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: rightLayout.height\n  }) : null;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: {\n      paddingLeft,\n      paddingRight\n    },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = { ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font,\n        fontSize,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, /*#__PURE__*/React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight\n    }]\n  }, !isAndroid && multiline && label &&\n  /*#__PURE__*/\n  // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n  // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n  React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render({\n    testID: 'text-input-flat',\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, {\n      paddingLeft,\n      paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, { ...font,\n      fontSize,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n};\n\nexport default TextInputFlat;\n\nconst Underline = _ref2 => {\n  let {\n    parentState,\n    error,\n    colors,\n    activeColor,\n    underlineColorCustom\n  } = _ref2;\n  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["TextInput","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","disabled","editable","error","render","props","multiline","rest","isAndroid","Platform","fonts","font","hasActiveOutline","parentState","fontSize","viewStyle","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","paddingHorizontal","adornmentConfig","getAdornmentConfig","right","paddingRight","calculateFlatInputHorizontalPadding","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","left","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","Flat","inputTextColor","activeColor","color","colors","placeholderColor","underlineColorCustom","activeUnderlineColor","errorColor","underlineColor","containerStyle","backgroundColor","theme","borderTopLeftRadius","borderTopRightRadius","roundness","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","AdornmentType","isTextInputFocused","textStyle","fontWeight","visible","labeled","testID","ref","placeholder","placeholderTextColor","selectionColor","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Underline","transform","scaleY","position","underline","bottom","zIndex","labelContainer","paddingTop","paddingBottom","input","flexGrow","margin","inputFlat","inputFlatDense","patchContainer","densePatchContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}