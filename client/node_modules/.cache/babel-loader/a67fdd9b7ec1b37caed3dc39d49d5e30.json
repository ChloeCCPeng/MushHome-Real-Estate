{"ast":null,"code":"var _jsxFileName = \"/Users/chloepeng/Documents/GitHub/Real-Estate-4/client/src/components/SignUpForm.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// // import { button, error, input, field, label, Textarea } from \"../styles\";\n// // import inputlabel from '@mui/material/inputlabel';\n// import { useNavigate } from \"react-router-dom\";\n// function SignUpForm({ onLogin }) {\n// const [username, setUsername] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n// const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n// const [sellerTrue, setSellerTrue] = useState(false);\n// const [sellerFalse, setSellerFalse] = useState(true);\n// const [errors, seterrors] = useState([]);\n// const [isLoading, setIsLoading] = useState(false);\n// const [seller, setSeller] = useState(false)\n// const history = useNavigate();\n// function handleSellerTrue() {\n// setSellerTrue(!sellerTrue)\n// setSeller(!seller)\n// }\n// function handleSellerFalse() {\n// setSellerFalse(!setSellerFalse)\n// setSeller(!seller)\n// }\n// function handleSubmit(e) {\n// e.preventDefault();\n// seterrors([]);\n// setIsLoading(true);\n// fetch(\"/signup\", {\n//     method: \"POST\",\n//     headers: {\n//     \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//     username,\n//     password,\n//     password_confirmation: passwordConfirmation,\n//     seller\n//     }),\n// }).then((r) => {\n//     setIsLoading(false);\n//     if (r.ok) {\n//     r.json().then((user) => onLogin(user));\n//     if (seller) return history.push(\"/sellerpage\")\n//     else return history.push(\"/\")\n//     } else {\n//     r.json().then((err) => seterrors(err.errors));\n//     }\n// });\n// }\n// return (\n// <form onSubmit={handleSubmit}>\n//     <field>\n//     <label htmlFor=\"username\">Username</label>\n//     <input\n//         type=\"text\"\n//         id=\"username\"\n//         autoComplete=\"off\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//     />\n//     </field>\n//     <field>\n//     <label htmlFor=\"password\">Password</label>\n//     <input\n//         type=\"password\"\n//         id=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         autoComplete=\"current-password\"\n//     />\n//     </field>\n//     <field>\n//     <label htmlFor=\"password\">Password Confirmation</label>\n//     <input\n//         type=\"password\"\n//         id=\"password_confirmation\"\n//         value={passwordConfirmation}\n//         onChange={(e) => setPasswordConfirmation(e.target.value)}\n//         autoComplete=\"current-password\"\n//     />\n//     </field>\n//     <field>\n//     <inputlabel id=\"select-label\">Are you a seller?</inputlabel>\n//     <div>\n//         <input\n//         type=\"radio\"\n//         value={sellerTrue}\n//         checked={seller === true}\n//         onClick={handleSellerTrue}\n//         /> yes\n//     </div>\n//     <div>\n//         <input\n//         type=\"radio\"\n//         value={sellerFalse}\n//         checked={seller === false}\n//         onClick={handleSellerFalse}\n//         /> no\n//     </div>\n//     </field>\n//     <field>\n//     <button type=\"submit\">{isLoading ? \"Loading...\" : \"Sign Up\"}</button>\n//     </field>\n//     <field>\n//     {errors.map((err) => (\n//         <error key={err}>{err}</error>\n//     ))}\n//     </field>\n// </form>\n// );\n// }\n// export default SignUpForm;\nimport React, { useState } from \"react\";\nimport { Button, Error, Input, FormField, Label, Textarea } from \"../styles\";\nimport InputLabel from '@mui/material/InputLabel';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignUpForm({\n  onLogin\n}) {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useNavigate();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setErrors([]);\n    setIsLoading(true);\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password_confirmation: passwordConfirmation\n      })\n    }).then(r => {\n      setIsLoading(false);\n\n      if (r.ok) {\n        r.json().then(user => onLogin(user));\n        return history.push(\"/\");\n      } else {\n        r.json().then(err => setErrors(err.errors));\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        id: \"username\",\n        autoComplete: \"off\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        autoComplete: \"current-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"password\",\n        children: \"Password Confirmation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        id: \"password_confirmation\",\n        value: passwordConfirmation,\n        onChange: e => setPasswordConfirmation(e.target.value),\n        autoComplete: \"current-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: isLoading ? \"Loading...\" : \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: errors.map(err => /*#__PURE__*/_jsxDEV(Error, {\n        children: err\n      }, err, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"KYaOPZduBU6YuNp5v7f3WN+TK48=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SignUpForm;\nexport default SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"sources":["/Users/chloepeng/Documents/GitHub/Real-Estate-4/client/src/components/SignUpForm.js"],"names":["React","useState","Button","Error","Input","FormField","Label","Textarea","InputLabel","useNavigate","SignUpForm","onLogin","username","setUsername","password","setPassword","passwordConfirmation","setPasswordConfirmation","errors","setErrors","isLoading","setIsLoading","history","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","password_confirmation","then","r","ok","json","user","push","err","target","value","map"],"mappingsgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,WAAjE;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAAA;;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,oBAAD,EAAuBC,uBAAvB,IAAkDhB,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMqB,OAAO,GAAGb,WAAW,EAA3B;;AAEA,WAASc,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACAN,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,IAAAA,KAAK,CAAC,SAAD,EAAY;AACfC,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFM;AAKfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBnB,QAAAA,QADmB;AAEnBE,QAAAA,QAFmB;AAGnBkB,QAAAA,qBAAqB,EAAEhB;AAHJ,OAAf;AALS,KAAZ,CAAL,CAUGiB,IAVH,CAUSC,CAAD,IAAO;AACbb,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAIa,CAAC,CAACC,EAAN,EAAU;AACRD,QAAAA,CAAC,CAACE,IAAF,GAASH,IAAT,CAAeI,IAAD,IAAU1B,OAAO,CAAC0B,IAAD,CAA/B;AACA,eAAOf,OAAO,CAACgB,IAAR,CAAa,GAAb,CAAP;AACD,OAHD,MAGO;AACLJ,QAAAA,CAAC,CAACE,IAAF,GAASH,IAAT,CAAeM,GAAD,IAASpB,SAAS,CAACoB,GAAG,CAACrB,MAAL,CAAhC;AACD;AACF,KAlBD;AAmBD;;AAED,sBACE;AAAM,IAAA,QAAQ,EAAEK,YAAhB;AAAA,4BACE,QAAC,SAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,KAAK,EAAEX,QAJT;AAKE,QAAA,QAAQ,EAAGY,CAAD,IAAOX,WAAW,CAACW,CAAC,CAACgB,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,SAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,KAAK,EAAE3B,QAHT;AAIE,QAAA,QAAQ,EAAGU,CAAD,IAAOT,WAAW,CAACS,CAAC,CAACgB,MAAF,CAASC,KAAV,CAJ9B;AAKE,QAAA,YAAY,EAAC;AALf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAqBE,QAAC,SAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAC,uBAFL;AAGE,QAAA,KAAK,EAAEzB,oBAHT;AAIE,QAAA,QAAQ,EAAGQ,CAAD,IAAOP,uBAAuB,CAACO,CAAC,CAACgB,MAAF,CAASC,KAAV,CAJ1C;AAKE,QAAA,YAAY,EAAC;AALf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF,eA+BE,QAAC,SAAD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,kBAAuBrB,SAAS,GAAG,YAAH,GAAkB;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA/BF,eAkCE,QAAC,SAAD;AAAA,gBACGF,MAAM,CAACwB,GAAP,CAAYH,GAAD,iBACV,QAAC,KAAD;AAAA,kBAAkBA;AAAlB,SAAYA,GAAZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;GA5EQ7B,U;UAOSD,W;;;KAPTC,U;AA8ET,eAAeA,UAAf","sourcesContent":["// import React, { useState } from \"react\";\n// // import { button, error, input, field, label, Textarea } from \"../styles\";\n// // import inputlabel from '@mui/material/inputlabel';\n// import { useNavigate } from \"react-router-dom\";\n\n// function SignUpForm({ onLogin }) {\n// const [username, setUsername] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n// const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n// const [sellerTrue, setSellerTrue] = useState(false);\n// const [sellerFalse, setSellerFalse] = useState(true);\n// const [errors, seterrors] = useState([]);\n// const [isLoading, setIsLoading] = useState(false);\n// const [seller, setSeller] = useState(false)\n\n// const history = useNavigate();\n\n// function handleSellerTrue() {\n// setSellerTrue(!sellerTrue)\n// setSeller(!seller)\n// }\n\n// function handleSellerFalse() {\n// setSellerFalse(!setSellerFalse)\n// setSeller(!seller)\n// }\n\n// function handleSubmit(e) {\n// e.preventDefault();\n// seterrors([]);\n// setIsLoading(true);\n// fetch(\"/signup\", {\n//     method: \"POST\",\n//     headers: {\n//     \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//     username,\n//     password,\n//     password_confirmation: passwordConfirmation,\n//     seller\n//     }),\n// }).then((r) => {\n//     setIsLoading(false);\n//     if (r.ok) {\n//     r.json().then((user) => onLogin(user));\n//     if (seller) return history.push(\"/sellerpage\")\n//     else return history.push(\"/\")\n//     } else {\n//     r.json().then((err) => seterrors(err.errors));\n//     }\n// });\n// }\n\n// return (\n// <form onSubmit={handleSubmit}>\n//     <field>\n//     <label htmlFor=\"username\">Username</label>\n//     <input\n//         type=\"text\"\n//         id=\"username\"\n//         autoComplete=\"off\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//     />\n//     </field>\n//     <field>\n//     <label htmlFor=\"password\">Password</label>\n//     <input\n//         type=\"password\"\n//         id=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         autoComplete=\"current-password\"\n//     />\n//     </field>\n//     <field>\n//     <label htmlFor=\"password\">Password Confirmation</label>\n//     <input\n//         type=\"password\"\n//         id=\"password_confirmation\"\n//         value={passwordConfirmation}\n//         onChange={(e) => setPasswordConfirmation(e.target.value)}\n//         autoComplete=\"current-password\"\n//     />\n//     </field>\n//     <field>\n//     <inputlabel id=\"select-label\">Are you a seller?</inputlabel>\n//     <div>\n//         <input\n//         type=\"radio\"\n//         value={sellerTrue}\n//         checked={seller === true}\n//         onClick={handleSellerTrue}\n//         /> yes\n//     </div>\n//     <div>\n//         <input\n//         type=\"radio\"\n//         value={sellerFalse}\n//         checked={seller === false}\n//         onClick={handleSellerFalse}\n//         /> no\n//     </div>\n//     </field>\n//     <field>\n//     <button type=\"submit\">{isLoading ? \"Loading...\" : \"Sign Up\"}</button>\n//     </field>\n//     <field>\n//     {errors.map((err) => (\n//         <error key={err}>{err}</error>\n//     ))}\n//     </field>\n// </form>\n// );\n// }\n\n// export default SignUpForm;\n\n\n\nimport React, { useState } from \"react\";\nimport { Button, Error, Input, FormField, Label, Textarea } from \"../styles\";\nimport InputLabel from '@mui/material/InputLabel';\nimport { useNavigate } from \"react-router-dom\";\n\nfunction SignUpForm({ onLogin }) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const history = useNavigate();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setErrors([]);\n    setIsLoading(true);\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password_confirmation: passwordConfirmation,\n      }),\n    }).then((r) => {\n      setIsLoading(false);\n      if (r.ok) {\n        r.json().then((user) => onLogin(user));\n        return history.push(\"/\")\n      } else {\n        r.json().then((err) => setErrors(err.errors));\n      }\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormField>\n        <Label htmlFor=\"username\">Username</Label>\n        <Input\n          type=\"text\"\n          id=\"username\"\n          autoComplete=\"off\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </FormField>\n      <FormField>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          autoComplete=\"current-password\"\n        />\n      </FormField>\n      <FormField>\n        <Label htmlFor=\"password\">Password Confirmation</Label>\n        <Input\n          type=\"password\"\n          id=\"password_confirmation\"\n          value={passwordConfirmation}\n          onChange={(e) => setPasswordConfirmation(e.target.value)}\n          autoComplete=\"current-password\"\n        />\n      </FormField>\n      <FormField>\n        <Button type=\"submit\">{isLoading ? \"Loading...\" : \"Sign Up\"}</Button>\n      </FormField>\n      <FormField>\n        {errors.map((err) => (\n          <Error key={err}>{err}</Error>\n        ))}\n      </FormField>\n    </form>\n  );\n}\n\nexport default SignUpForm;"]},"metadata":{},"sourceType":"module"}