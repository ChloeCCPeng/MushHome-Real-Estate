{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput } from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    mode = 'flat',\n    dense = false,\n    disabled = false,\n    error: errorProp = false,\n    multiline = false,\n    editable = true,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    ...rest\n  } = _ref;\n  const isControlled = rest.value !== undefined;\n  const validInputValue = isControlled ? rest.value : rest.defaultValue;\n  const {\n    current: labeled\n  } = React.useRef(new Animated.Value(validInputValue ? 0 : 1));\n  const {\n    current: error\n  } = React.useRef(new Animated.Value(errorProp ? 1 : 0));\n  const [focused, setFocused] = React.useState(false);\n  const [placeholder, setPlaceholder] = React.useState('');\n  const [uncontrolledValue, setUncontrolledValue] = React.useState(validInputValue); // Use value from props instead of local state when input is controlled\n\n  const value = isControlled ? rest.value : uncontrolledValue;\n  const [labelLayout, setLabelLayout] = React.useState({\n    measured: false,\n    width: 0,\n    height: 0\n  });\n  const [leftLayout, setLeftLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const [rightLayout, setRightLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const timer = React.useRef();\n  const root = React.useRef();\n  const {\n    scale\n  } = rest.theme.animation;\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _root$current;\n\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n    },\n    clear: () => {\n      var _root$current2;\n\n      return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n    },\n    setNativeProps: args => {\n      var _root$current3;\n\n      return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n    },\n    isFocused: () => {\n      var _root$current4;\n\n      return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n    },\n    blur: () => {\n      var _root$current5;\n\n      return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n    },\n    forceFocus: () => {\n      var _root$current6;\n\n      return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n    }\n  }));\n  React.useEffect(() => {\n    // When the input has an error, we wiggle the label and apply error styles\n    if (errorProp) {\n      // show error\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide error\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(() => {\n    // Show placeholder text only if the input is focused, or there's no label\n    // We don't show placeholder if there's a label because the label acts as placeholder\n    // When focused, the label moves up, so we can show a placeholder\n    if (focused || !rest.label) {\n      // Set the placeholder in a delay to offset the label animation\n      // If we show it immediately, they'll overlap and look ugly\n      timer.current = setTimeout(() => setPlaceholder(rest.placeholder), 50);\n    } else {\n      // hidePlaceholder\n      setPlaceholder('');\n    }\n\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(() => {\n    // The label should be minimized if the text input is focused, or has text\n    // In minimized mode, the label moves up and becomes small\n    // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    if (value || focused) {\n      // minimize label\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // restore label\n      {\n        Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [focused, value, labeled, scale]);\n\n  const onLeftAffixLayoutChange = event => {\n    setLeftLayout({\n      height: event.nativeEvent.layout.height,\n      width: event.nativeEvent.layout.width\n    });\n  };\n\n  const onRightAffixLayoutChange = event => {\n    setRightLayout({\n      width: event.nativeEvent.layout.width,\n      height: event.nativeEvent.layout.height\n    });\n  };\n\n  const handleFocus = args => {\n    var _rest$onFocus;\n\n    if (disabled || !editable) {\n      return;\n    }\n\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n\n  const handleBlur = args => {\n    var _rest$onBlur;\n\n    if (!editable) {\n      return;\n    }\n\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n\n  const handleChangeText = value => {\n    var _rest$onChangeText;\n\n    if (!editable || disabled) {\n      return;\n    }\n\n    if (!isControlled) {\n      // Keep track of value in local state when input is not controlled\n      setUncontrolledValue(value);\n    }\n\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n\n  const handleLayoutAnimatedText = e => {\n    setLabelLayout({\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n      measured: true\n    });\n  };\n\n  const forceFocus = () => {\n    var _root$current7;\n\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n\n  if (mode === 'outlined') {\n    return /*#__PURE__*/React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      value: value,\n      parentState: {\n        labeled,\n        error,\n        focused,\n        placeholder,\n        value,\n        labelLayout,\n        leftLayout,\n        rightLayout\n      },\n      innerRef: ref => {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    value: value,\n    parentState: {\n      labeled,\n      error,\n      focused,\n      placeholder,\n      value,\n      labelLayout,\n      leftLayout,\n      rightLayout\n    },\n    innerRef: ref => {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }));\n}); // @component ./Adornment/TextInputIcon.tsx\n\nTextInput.Icon = TextInputIcon; // @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\n\nTextInput.Affix = TextInputAffix;\nexport default withTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["TextInput","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","mode","dense","disabled","error","errorProp","multiline","editable","render","props","rest","isControlled","validInputValue","current","labeled","React","Animated","value","measured","width","height","timer","root","scale","focus","clear","setNativeProps","args","isFocused","blur","forceFocus","toValue","duration","useNativeDriver","focused","setTimeout","setPlaceholder","clearTimeout","onLeftAffixLayoutChange","event","setLeftLayout","onRightAffixLayoutChange","setRightLayout","handleFocus","setFocused","handleBlur","handleChangeText","setUncontrolledValue","handleLayoutAnimatedText","e","setLabelLayout","maxFontSizeMultiplier","rightLayout","ref","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    TextInputProps & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, TextInputProps>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: TextInputProps,\n    ref\n  ) => {\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ''\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(\n          () => setPlaceholder(rest.placeholder),\n          50\n        ) as unknown as NodeJS.Timeout;\n      } else {\n        // hidePlaceholder\n        setPlaceholder('');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}