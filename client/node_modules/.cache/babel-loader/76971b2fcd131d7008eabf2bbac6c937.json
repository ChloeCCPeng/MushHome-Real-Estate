{"ast":null,"code":"import * as React from 'react';\nimport { View, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor: _underlineColor,\n    outlineColor: customOutlineColor,\n    activeOutlineColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    ...rest\n  } = _ref;\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  const {\n    colors,\n    fonts\n  } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(_ref2 => {\n    let {\n      side,\n      type\n    } = _ref2;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingOut = adjustPaddingOut({ ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    mode: 'outlined'\n  });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = { ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font,\n        fontSize,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(View, {\n    style: viewStyle\n  }, /*#__PURE__*/React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight\n    }]\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render({\n    testID: 'text-input-outlined',\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, { ...font,\n      fontSize,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nconst Outline = _ref3 => {\n  let {\n    theme,\n    hasActiveOutline,\n    activeColor,\n    outlineColor,\n    focused,\n    backgroundColor\n  } = _ref3;\n  return /*#__PURE__*/React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, // eslint-disable-next-line react-native/no-inline-styles\n    {\n      backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["TextInput","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","error","underlineColor","outlineColor","render","props","multiline","rest","adornmentConfig","getAdornmentConfig","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","isTransparent","color","inputTextColor","activeColor","placeholderColor","activeOutlineColor","customOutlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","placeholderStyle","wiggleOffsetX","roundness","theme","maxFontSizeMultiplier","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","left","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","isTextInputFocused","textStyle","fontWeight","visible","labeled","paddingTop","testID","ref","placeholder","label","placeholderTextColor","selectionColor","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Outline","borderRadius","borderWidth","focused","borderColor","position","paddingHorizontal","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}