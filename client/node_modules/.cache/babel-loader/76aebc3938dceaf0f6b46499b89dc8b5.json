{"ast":null,"code":"import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nconst LabelBackground = _ref => {\n  let {\n    parentState,\n    labelProps: {\n      placeholderStyle,\n      baseLabelTranslateX,\n      topPosition,\n      hasActiveOutline,\n      label,\n      backgroundColor,\n      roundness\n    },\n    labelStyle,\n    maxFontSizeMultiplier\n  } = _ref;\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  const labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [-baseLabelTranslateX, 0]\n      })\n    }]\n  };\n  return label ? [/*#__PURE__*/React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      opacity,\n      bottom: Math.max(roundness, 2)\n    }, labelTranslationX]\n  }), /*#__PURE__*/React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor,\n      opacity,\n      transform: [...labelStyle.transform, {\n        scaleY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }],\n      maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)] : null;\n};\n\nexport default LabelBackground;\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"sources":["LabelBackground.tsx"],"names":["LabelBackground","labelProps","roundness","maxFontSizeMultiplier","hasFocus","hasActiveOutline","parentState","opacity","inputRange","outputRange","labelTranslationX","transform","translateX","label","StyleSheet","styles","maxHeight","Math","bottom","top","topPosition","labelStyle","scaleY","maxWidth","placeholderStyle","paddingHorizontal","view","position","left","width","outlinedLabel","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n    roundness,\n  },\n  labelStyle,\n  maxFontSizeMultiplier,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const labelTranslationX = {\n    transform: [\n      {\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              maxHeight: Math.max(roundness / 3, 2),\n              opacity,\n              bottom: Math.max(roundness, 2),\n            },\n            labelTranslationX,\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: [\n                ...labelStyle.transform,\n                {\n                  scaleY: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.2, 1],\n                  }),\n                },\n              ],\n              maxWidth:\n                parentState.labelLayout.width -\n                2 * placeholderStyle.paddingHorizontal,\n            },\n          ]}\n          numberOfLines={1}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}